package migrations

import "github.com/concourse/atc/db/migration"

func InitialSchema(tx migration.LimitedTx) error {
	_, err := tx.Exec(`
		CREATE TYPE build_status AS ENUM (
			'pending',
			'started',
			'aborted',
			'succeeded',
			'failed',
			'errored'
		)
	`)
	if err != nil {
		return err
	}

	// only for reference; configuration is not duped into db
	_, err = tx.Exec(`
		CREATE TABLE jobs (
			name text PRIMARY KEY,
			build_number_seq integer NOT NULL DEFAULT 0
		)
	`)
	if err != nil {
		return err
	}

	// only for reference; configuration is denormalized in resource instances
	_, err = tx.Exec(`
		CREATE TABLE resources (
			name text PRIMARY KEY
		)
	`)
	if err != nil {
		return err
	}

	// all builds
	_, err = tx.Exec(`
		CREATE TABLE builds (
			id serial PRIMARY KEY,
			job_name text REFERENCES jobs (name),
			name text NOT NULL,
			status build_status NOT NULL,
			scheduled boolean NOT NULL DEFAULT false,
			abort_url varchar(255),
			log text NOT NULL DEFAULT '',
			UNIQUE (job_name, name)
		)
	`)
	if err != nil {
		return err
	}

	// denormalized resource information
	_, err = tx.Exec(`
		CREATE TABLE versioned_resources (
			id serial PRIMARY KEY,
			resource_name text REFERENCES resources (name),
			version text NOT NULL,
			UNIQUE (resource_name, version)
		)
	`)
	if err != nil {
		return err
	}

	// input references for a build
	_, err = tx.Exec(`
		CREATE TABLE build_inputs (
			build_id integer REFERENCES builds (id),
			versioned_resource_id integer REFERENCES versioned_resources (id),
			source text NOT NULL,
			metadata text NOT NULL
		)
	`)
	if err != nil {
		return err
	}

	// versions generated by a build's output
	_, err = tx.Exec(`
		CREATE TABLE build_outputs (
			build_id integer REFERENCES builds (id),
			versioned_resource_id integer REFERENCES versioned_resources (id),
			source text NOT NULL,
			metadata text NOT NULL
		)
	`)
	if err != nil {
		return err
	}

	// current version for a build's input
	// to be replaced with entries in versioned_resources
	_, err = tx.Exec(`
		CREATE TABLE transitional_current_versions (
			id serial PRIMARY KEY,
			job_name text REFERENCES jobs (name),
			resource_name text REFERENCES resources (name),
			version text NOT NULL
		)
	`)
	if err != nil {
		return err
	}

	return nil
}
